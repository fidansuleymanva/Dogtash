/* ---------------------------- $$$ ==> FUNCTION == TIME COUNTER <== $$$ ---------------------------- */
function setCounter(expireDate, counterRootElement, daysString, hoursString, minutesString, secondsString, expireString) {
    /* definition root element */
    var elem_counterRoot = $(counterRootElement);
    /* append data and text elements for day, hour, minute and second elements */
    elem_counterRoot.append('<span class="days"><span class="data"></span><span class="text">' + daysString + '</span></span>')
    elem_counterRoot.append('<span class="hours"><span class="data"></span><span class="text">' + hoursString + '</span></span>')
    elem_counterRoot.append('<span class="minutes"><span class="data"></span><span class="text">' + minutesString + '</span></span>')
    elem_counterRoot.append('<span class="seconds"><span class="data"></span><span class="text">' + secondsString + '</span></span>')
    /* definition inner elements */
    var elem_Days = $(elem_counterRoot).children('.days');
    var elem_Hours = $(elem_counterRoot).children('.hours');
    var elem_Minutes = $(elem_counterRoot).children('.minutes');
    var elem_Seconds = $(elem_counterRoot).children('.seconds');
    /* definition data elements where inner counter elements */
    var elem_Days_Data = $(elem_Days).children('.data');
    var elem_Hours_Data = $(elem_Hours).children('.data');
    var elem_Minutes_Data = $(elem_Minutes).children('.data');
    var elem_Seconds_Data = $(elem_Seconds).children('.data');
    /* definition expire date */
    var time_Expire = new Date(expireDate).getTime();
    /* set interval function */
    var intervalCounter = setInterval(function () {
        /* definition current and remaining time */
        var time_Now = new Date().getTime();
        var time_Remaining = time_Expire - time_Now;
        /* definition time elements for expire time */
        var data_Days = Math.floor(time_Remaining / (1000 * 60 * 60 * 24));
        var data_Hours = Math.floor((time_Remaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var data_Minutes = Math.floor((time_Remaining % (1000 * 60 * 60)) / (1000 * 60));
        var data_Seconds = Math.floor((time_Remaining % (1000 * 60)) / 1000);
        /* definition rendering elements options */
        var render_Days = data_Days > 0 ? true : false;
        var render_Hours = (data_Hours > 0) || (data_Hours == 0 && render_Days == true) ? true : false;
        var render_Minutes = (data_Minutes > 0) || (data_Minutes == 0 && render_Hours == true) ? true : false;
        var render_Seconds = (data_Seconds > 0) || (data_Seconds == 0 && render_Minutes == true) ? true : false;
        /* init time to elements */
        render_Days ? $(elem_Days_Data).text(data_Days) : elem_Days.hide();
        render_Hours ? $(elem_Hours_Data).text(data_Hours) : elem_Hours.hide();
        render_Minutes ? $(elem_Minutes_Data).text(data_Minutes) : elem_Minutes.hide();
        render_Seconds ? $(elem_Seconds_Data).text(data_Seconds) : elem_Seconds.hide();
        /* init finish time event */
        if (time_Remaining < 0) {
            clearInterval(intervalCounter);
            elem_counterRoot.children().hide();
            elem_counterRoot.append('<span class="expired">' + expireString + '</span>');
        }
    }, 1000);
}

/* ---------------------------- $$$ ==> FUNCTION == ADD ZERO BEFORE BUTTON NUMBER OF LIST <== $$$ ---------------------------- */
function addZeroBeforeButtonNumbersOfList(buttonElement) {
    var buttonElement = $(buttonElement);
    buttonElement.each(function (index) {
        if (index < 9) {
            $(this).html('0' + $(this).html());
        }
        if (buttonElement.length < 2) {
            $(this).parents('.slide-dots').hide();
        }
    });
}

/* ---------------------------- $$$ ==> FUNCTION == TABABLE CONTENT <== $$$ ---------------------------- */
function tabableContent(tabActionElement, tabBodyElement, attrName, activeClassName) {
    var _tabActionElement = $(tabActionElement);
    $(_tabActionElement).click(function () {
        var clickedTabNameData = $(this).attr(attrName);
        $(_tabActionElement).not(this).removeClass(activeClassName);
        $(this).addClass(activeClassName);
        $(tabBodyElement + '[' + attrName + '!="' + clickedTabNameData + '"]').removeClass(activeClassName);
        $(tabBodyElement + '[' + attrName + '="' + clickedTabNameData + '"]').addClass(activeClassName);
    })
}

/* ---------------------------- $$$ --- FUNCTION == CLICK AND SCROLL BUTTON --- $$$ ---------------------------- */
$('[data-click-action-role=scroll-and-open-tab]').click(function () {
    var _tabName = $(this).attr('data-tab-action');
    $('[data-tab=' + _tabName + ']').trigger('click');
    var _scrollArea = $(this).attr('data-scroll-area-class');
    window.scroll({
        top: $('.' + _scrollArea).offset().top - $('header.main-header').height(),
        behavior: 'smooth'
    });
});

/* ---------------------------- $$$ ==> FUNCTION == SLICK SLIDER TIMING BAR <== $$$ ---------------------------- */
function slick_TimingBar(slideRootParam, pauseOnHoverParam, setNavBackground) {
    /* definition elements */
    var slideRoot = slideRootParam;
    var slidesRoot = slideRoot.find('.slide-items');
    var timingRoot = slideRoot.find('.slider-timing');
    var timingBar = timingRoot.find('.time-bar');
    /* get slide time. if slide time is not written set default value as 10sec (10000 milisec) */
    var slideTimeAsMilisecond = parseInt(slidesRoot.attr('data-slides-time')) || 10000;
    var slideTimeAsSecond = slideTimeAsMilisecond / 1000;
    /* set pause timing when hover on/off status by fuction parameter. if parameter is true, check mouseenter/mouseleave event */
    var isPaused = pauseOnHoverParam ? slidesRoot.on({
        mouseenter: function () {
            isPaused = true;
        }, mouseleave: function () {
            isPaused = false;
        }
    }) : false;
    /* set blank variables for time percent and time step */
    var timingStep, percentTime;

    /* fired when start and change the slide */
    function startTimingBar() {
        resetTimingBar();
        percentTime = 0;
        isPaused = false;
        timingStep = setInterval(stepInterval, 10);
    }

    /* time steps */
    function stepInterval() {
        if (isPaused === false) {
            percentTime += 1 / (slideTimeAsSecond + 0.1);
            timingBar.css({ width: percentTime + "%" });
            if (percentTime >= 100) {
                slidesRoot.slick('slickNext');
                if (setNavBackground == true) {
                    slick_SetNavBackground(slideRoot);
                }
                startTimingBar();
            }
        }
    }

    /* reset time bar width and clear time data */
    function resetTimingBar() {
        percentTime = 0;
        timingBar.css({ width: 0 + '%' });
        clearTimeout(timingStep);
        clearInterval(timingStep);
    }

    /* init timing when slider start event */
    startTimingBar();
    /* init timing when slider changingn event */
    slidesRoot.on('beforeChange', function () {
        startTimingBar();
    });
}

/* ---------------------------- $$$ ==> FUNCTION == SLICK SLIDER BG IMAGE NAVIGATION <== $$$ ---------------------------- */
function slick_SetNavBackground(slidesRootParam, imageElemParam = null, imageIsBackground = true, isLazyLoadActive = false) {
    var slidesRoot = $(slidesRootParam);
    /* nav variables */
    var leftNav = slidesRoot.find('.slide-track-navigation .left-navigation');
    var rightNav = slidesRoot.find('.slide-track-navigation .right-navigation');
    var currentItem = slidesRoot.find('.slide-track-navigation .current-item');
    /* slider variables */
    var _slickCurrent = slidesRoot.find('.slick-current');
    var _prevItem = _slickCurrent.prev('.slide-item');
    var _nextItem = _slickCurrent.next('.slide-item');
    var _prevLength = _prevItem.length;
    var _nextLength = _nextItem.length;
    var _firstItem = slidesRoot.find('.slide-item').first();
    var _lastItem = slidesRoot.find('.slide-item').last();

    /* get an image url where placed on element */
    function getImageUrl(imageElement) {
        var imageUrl = "";
        if (imageIsBackground) {
            imageUrl = imageElement.css('background-image');
        } else {
            imageUrl = imageElement.find('.slide-background-image').attr('src');
            if (isLazyLoadActive) {
                var lazyImageUrl = imageElement.find('.slide-background-image').attr('data-lazy');
                imageUrl = lazyImageUrl != null && lazyImageUrl.length != 0 ? lazyImageUrl : imageUrl;
            }
        }
        return imageUrl;
    }

    /* setting for grab image from an element */
    if (imageElemParam == "image-holder") {
        var beforeSliderItem = _prevLength != 0 ? _prevItem.find('.image-holder') : _lastItem.find('.image-holder');
        var beforeSliderImage = getImageUrl(beforeSliderItem);
        var nextSliderItem = _nextLength != 0 ? _nextItem.find('.image-holder') : _firstItem.find('.image-holder');
        var nextSliderImage = getImageUrl(nextSliderItem);
        var currentSliderItem = _slickCurrent.find('.image-holder');
        var currentSliderImage = getImageUrl(currentSliderItem);
    }
    /* grab image from slide-item element when not set for grab image for an element */
    if (imageElemParam == null) {
        var beforeSliderItem = _prevLength != 0 ? _prevItem : _lastItem;
        var beforeSliderImage = getImageUrl(beforeSliderItem);
        var nextSliderItem = _nextLength != 0 ? _nextItem : _firstItem;
        var nextSliderImage = getImageUrl(nextSliderItem);
        var currentSliderImage = getImageUrl(_slickCurrent);
    }
    leftNav.css('background-image', beforeSliderImage);
    rightNav.css('background-image', nextSliderImage);
    currentItem.css('background-image', currentSliderImage);
}

/* ---------------------------- $$$ ==> FUNCTION == HEADER MEGA CONTENT SHOWN <== $$$ ---------------------------- */
function megaContentShown(triggerButton, triggerWrapper, megaContentWrapper, slideToggleTime, allowSetBodyOverflowHidden = true) {
    var trigger = $(triggerButton);
    var triggerWrap = $(triggerWrapper);
    var megaContentWrap = $(megaContentWrapper);
    var body = $('body');
    if (trigger.hasClass('active')) {
        trigger.removeClass('active');
        if (allowSetBodyOverflowHidden) {
            body.removeClass('overflow-hidden');
        }
    } else {
        trigger.addClass('active');
        if (allowSetBodyOverflowHidden) {
            body.addClass('overflow-hidden');
        }
    }
    if (triggerWrap.hasClass('mega-content-hidden')) {
        triggerWrap.removeClass('mega-content-hidden');
        triggerWrap.addClass('mega-content-shown');
    } else {
        triggerWrap.addClass('mega-content-hidden');
        triggerWrap.removeClass('mega-content-shown');
    }
    if (megaContentWrap.hasClass('hidden')) {
        megaContentWrap.removeClass('hidden');
        megaContentWrap.addClass('shown');
    } else {
        megaContentWrap.addClass('hidden');
        megaContentWrap.removeClass('shown');
    }

    function initLazyImages() {
        var _lazyImagesClassName = megaContentWrapper + ' .jLazyImage';
        if (!$(_lazyImagesClassName).hasClass('jLazyImage-Loaded')) {
            // lazyLoadInit(_lazyImagesClassName);
        }
    }

    megaContentWrap.slideToggle(slideToggleTime, initLazyImages);
}

/* ---------------------------- $$$ ==> FUNCTION == HEADER MEGA CONTENT CLOSE ALL <== $$$ ---------------------------- */
function megaContentJustClose(triggerButton, triggerWrapper, megaContentWrapper, slideToggleTime) {
    var trigger = $(triggerButton);
    var triggerWrap = $(triggerWrapper);
    var megaContentWrap = $(megaContentWrapper);
    var body = $('body');
    if (trigger.hasClass('active')) {
        trigger.removeClass('active');
        body.removeClass('overflow-hidden');
    }
    if (triggerWrap.hasClass('mega-content-shown')) {
        triggerWrap.removeClass('mega-content-shown');
        triggerWrap.addClass('mega-content-hidden');
    }
    if (megaContentWrap.hasClass('shown')) {
        megaContentWrap.removeClass('shown');
        megaContentWrap.addClass('hidden');
        megaContentWrap.slideToggle(slideToggleTime);
    }
}

/* ---------------------------- $$$ ==> FUNCTION == HEADER MEGA CONTENT SEARCH RUN <== $$$ ---------------------------- */
function megaContentSearchRun(searchForm, searchInput, minSearchTermLength, enterSearchTermsText, submitEvent) {
    var form = $(searchForm);
    var input = $(searchInput);
    if (input.val().length >= minSearchTermLength) {
        if (submitEvent == null) {
            form.submit();
        }
    } else {
        input.attr('placeholder', enterSearchTermsText).val('').focus();
        if (submitEvent != null) {
            submitEvent.preventDefault();
        }
    }
}

/* ---------------------------- $$$ ==> FUNCTION == YANDEX MAP - GENERATE MAP IMAGE LINK <== $$$ ---------------------------- */
function generateYandexMapImageURL(languageCulture, latCoordinate, lngCoordinate, zoomLevel, mapSizes) {
    var mapImageURL = 'https://static-maps.yandex.ru/1.x/?l=map&lang=' + languageCulture + '&ll=' + lngCoordinate + ',' + latCoordinate + '&z=' + zoomLevel + '&size=' + mapSizes + '&pt=' + lngCoordinate + ',' + latCoordinate + ',comma';
    return (mapImageURL);
}

/* ---------------------------- $$$ ==> FUNCTION == GOOGLE MAP - REDIRECT PLACE LINK <== $$$ ---------------------------- */
function redirectGoogleMapPlaceLink(latCoordinate, lngCoordinate) {
    var generateCoordinateString = latCoordinate + ',' + lngCoordinate;
    var placeLink = 'https://www.google.com/maps/search/?api=1&query=' + generateCoordinateString;
    window.open(placeLink, '_blank');
}

/* ---------------------------- $$$ ==> FUNCTION == YANDEX MAP - CREATE MAP JS DYNAMIC <== $$$ ---------------------------- */
function createYandexMap(rootElementID, latCoordinate, lngCoordinate, zoomLevel, isMarkerActive, storeTitle) {
    ymaps.ready(init);

    function init() {
        var map = new ymaps.Map(rootElementID, {
            center: [latCoordinate, lngCoordinate],
            zoom: zoomLevel,
            controls: ['zoomControl', 'fullscreenControl']
        });
        if (isMarkerActive === true) {
            var marker = new ymaps.Placemark([latCoordinate, lngCoordinate], { hintContent: storeTitle }, { preset: 'islands#dotIcon' });
            map.geoObjects.add(marker);
        }
    }
}

/* ---------------------------- $$$ ==> FUNCTION == STORE LETTERS SHOWN <== $$$ ---------------------------- */
function storeLettersShown(letterType, isShow) {
    $('.letter-list .letter-list-item').each(function () {
        if (($(this).attr('data-letter-list-type') == letterType)) {
            if (isShow) {
                $(this).show();
            } else {
                $(this).hide();
            }
        }
    });
}

function storeAllLettersShow() { storeLettersShown("domestic", false); storeLettersShown("abroad", false); storeLettersShown("all", true); storeLettersShown("outlet", false); }
function storeDomesticLettersShow() { storeLettersShown("all", false); storeLettersShown("abroad", false); storeLettersShown("domestic", true); storeLettersShown("outlet", false); }
function storeAbroadLettersShow() { storeLettersShown("all", false); storeLettersShown("domestic", false); storeLettersShown("abroad", true); storeLettersShown("outlet", false); }
function storeOutletLettersShow() { storeLettersShown("all", false); storeLettersShown("domestic", false); storeLettersShown("abroad", false); storeLettersShown("outlet", true); }
function storeLetterHideAll() { storeLettersShown("all", false); storeLettersShown("domestic", false); storeLettersShown("abroad", false); storeLettersShown("outlet", false); }

/* ---------------------------- $$$ ==> FUNCTION == STORES SHOWN <== $$$ ---------------------------- */
function storesShown(storeType, isShow) {
    $('.city-and-stores-list .city-and-stores-list-item').each(function () {
        if ($(this).attr('data-store-type') == storeType) {
            if (isShow) {
                $(this).show();
            } else {
                $(this).hide();
            }
        }
    });
}

function storeAllStoresShow() { storesShown("domestic", true); storesShown("abroad", true); storesShown("outlet", true); }
function storeDomesticStoresShow() { storesShown("domestic", true); storesShown("abroad", false); storesShown("outlet", false); }
function storeAbroadStoresShow() { storesShown("domestic", false); storesShown("abroad", true); storesShown("outlet", false); }
function storeOutletStoresShow() { storesShown("domestic", false); storesShown("abroad", false); storesShown("outlet", true); }
function storeAllStoresHide() { storesShown("domestic", false); storesShown("abroad", false); storesShown("outlet", false); }

/* ---------------------------- $$$ ==> FUNCTION == CREATE COOKIE <== $$$ ---------------------------- */
function createCookie(cookieName, cookieValue, cookieDays) {
    if (cookieDays) {
        var date = new Date();
        date.setTime(date.getTime() + (cookieDays * 24 * 60 * 60 * 1000));
        var expires = "; expires=" + date.toGMTString();
    } else {
        var expires = "";
    }
    document.cookie = cookieName + "=" + cookieValue + expires + "; path=/";
}

/* ---------------------------- $$$ ==> FUNCTION == READ COOKIE <== $$$ ---------------------------- */
function readCookie(cookieName) {
    var cookieNameEquals = cookieName + "=";
    var documentCookies = document.cookie.split(';');
    for (var i = 0; i < documentCookies.length; i++) {
        var cookie = documentCookies[i];
        while (cookie.charAt(0) == ' ') {
            cookie = cookie.substring(1, cookie.length);
        }
        if (cookie.indexOf(cookieNameEquals) == 0) {
            return cookie.substring(cookieNameEquals.length, cookie.length);
        }
    }
    return null;
}

/* ---------------------------- $$$ ==> FUNCTION == MERGE (EXTEND) OBJECTS <== $$$ ---------------------------- */
function mergeTwoObjects(object1, object2) {
    return $.extend(object1, object2);
}

/* ---------------------------- $$$ --- LAZYLOAD INIT - OK --- $$$ ---------------------------- */

// function lazyLoadInit(initFor = null) {
//     var _selector = initFor == null ? ".jLazyImage" : initFor;
//     $(_selector).Lazy({
//         effect: 'fadeIn',
//         effectTime: 500,
//         threshold: 0,
//         visibleOnly: false,
//         afterLoad: function (element) {
//             element.addClass('jLazyImage-Loaded');
//         }
//     });
// }

// $(function () {
//     lazyLoadInit(null);
// });

/* ---------------------------- $$$ --- HEADER - OK --- $$$ ---------------------------- */
$('.menu-action').click(function () {
    megaContentShown(this, '.menu-item', '.header-main-list-mega-content', 150);
    $('.menu-action .text').slideToggle(150);
    var homepageSliderRedirectionArea = $('.homepage-slider .redirection-area');
    if (homepageSliderRedirectionArea.hasClass('hidden')) {
        homepageSliderRedirectionArea.removeClass('hidden');
    } else {
        homepageSliderRedirectionArea.addClass('hidden');
    }
});
var headerMainMegaContentCenterColumn = $('.header-main-list-mega-content .header-mega-content-center-bar .center-bar-columns-list .center-bar-column');
headerMainMegaContentCenterColumn.each(function (index) {
    var thisColumn = $(this);
    var innerListElementCount = thisColumn.find('.column-inner-list .column-inner-list-item').length;
    var openingProcessTiming = parseInt(innerListElementCount * 30);
    var thisCloser = thisColumn.find('.close-column-button');
    thisColumn.hover(
        function () {
            if ($(window).width() > 1399) {
                thisColumn.addClass('active');
                headerMainMegaContentCenterColumn.not(thisColumn).addClass('passive');
                thisColumn.find('.column-body').slideToggle(150);
            }
        },
        function () {
            if ($(window).width() > 1399) {
                thisColumn.removeClass('active');
                headerMainMegaContentCenterColumn.not(thisColumn).removeClass('passive');
                thisColumn.find('.column-body').slideToggle(150);
            }
        }
    );
    thisColumn.click(function () {
        if ($(window).width() < 1400) {
            if (!thisColumn.hasClass('clicked') && !thisColumn.hasClass('closed')) {
                thisColumn.addClass('clicked');
                thisColumn.find('.column-body').slideToggle(150, function () {
                });
            }
            if (!thisColumn.hasClass('clicked') && thisColumn.hasClass('closed')) {
                thisColumn.removeClass('closed');
            }
        }
    });
    thisCloser.click(function () {
        if (thisColumn.hasClass('clicked')) {
            thisColumn.removeClass('clicked');
            thisColumn.addClass('closed');
            thisColumn.find('.column-body').slideToggle(150);
        }
    });
});

$('.search-action').click(function () {
    megaContentShown(this, '.search-item', '.header-search-mega-content', 150);
    var homepageSliderRedirectionArea = $('.homepage-slider .redirection-area');
    if (homepageSliderRedirectionArea.hasClass('hidden')) {
        homepageSliderRedirectionArea.removeClass('hidden');
    } else {
        homepageSliderRedirectionArea.addClass('hidden');
    }
})

$(document).click(function (documentClickEvent) {
    var clickTarget = documentClickEvent.target;
    var homepageSliderRedirectionArea = $('.homepage-slider .redirection-area');
    if (!$(clickTarget).is('header *')) {
        megaContentJustClose('.menu-action', '.menu-item', '.header-main-list-mega-content', 150);
        if ($('.menu-action .text').is(':hidden')) {
            $('.menu-action .text').slideToggle(150);
        }
        ;
        megaContentJustClose('.search-action', '.search-item', '.header-search-mega-content', 150);
        if (homepageSliderRedirectionArea.hasClass('hidden')) {
            homepageSliderRedirectionArea.removeClass('hidden');
        }
    }
});

function setHeaderBg() {
    var headerHeight = $('header.main-header').height();
    if ($(window).scrollTop() > headerHeight) {
        $('header.main-header').removeClass('transparent-bg');
        $('header.main-header nav.main-nav').removeClass('transparent-bg');
        $('header.main-header').addClass('colored-bg');
        $('header.main-header nav.main-nav').addClass('colored-bg');
    } else {
        $('header.main-header').removeClass('colored-bg');
        $('header.main-header nav.main-nav').removeClass('colored-bg');
        $('header.main-header').addClass('transparent-bg');
        $('header.main-header nav.main-nav').addClass('transparent-bg');
    }
}

$(window).scroll(function () {
    setHeaderBg();
});
$(document).ready(function () {
    setHeaderBg();
});

/* ---------------------------- $$$ --- FOOTER - OK --- $$$ ---------------------------- */
var $windowForFooter = $(window);

function footerAccordionClassPlacement() {
    var windowsize = $windowForFooter.width();
    var ft_itemsBlock = $('.footer-content-items-list');
    var ft_collumnTitle = $('.footer-column-title');
    var ft_collumnList = $('.footer-column-list');
    var ft_collumnListGroup = $('.footer-list-group');
    if (windowsize < 768) {
        ft_itemsBlock.addClass('footer-accordion ui accordion');
        ft_collumnTitle.addClass('collapsible-header title');
        ft_collumnList.addClass('collapsible-body content');
        ft_collumnListGroup.addClass('collapsible-body content');
    } else {
        ft_itemsBlock.removeClass('footer-accordion ui accordion');
        ft_collumnTitle.removeClass('collapsible-header title');
        ft_collumnList.removeClass('collapsible-body content');
        ft_collumnListGroup.removeClass('collapsible-body content');
    }
    ;
};
footerAccordionClassPlacement();
$(window).resize(footerAccordionClassPlacement);
$('.footer-content-items-list').accordion({
    selector: {
        accordion: '.footer-accordion',
        title: '.collapsible-header',
        trigger: '.collapsible-header',
        content: '.collapsible-body'
    }
});

/* ---------------------------- $$$ --- GLOBAL RELATED PRODUCTS - OK --- $$$ ---------------------------- */
var globalRelatedProductSettings = {
    infinite: true,
    autoplay: false,
    autoplaySpeed: 3000,
    slidesToShow: 2,
    slidesToScroll: 1,
    dots: false,
    nextArrow: '.global-related-products .right-navigation',
    prevArrow: '.global-related-products .left-navigation',
    responsive: [
        { breakpoint: 1600, settings: { slidesToShow: 1 } }
    ]
}

/* ---------------------------- $$$ --- INSTAFEED SETTINGS - OK --- $$$ ---------------------------- */
var instafeedSettings = {
    get: 'user',
    limit: 3,
    resolution: 'standard_resolution',
    template: '<a href="{{link}}" title="{{caption}}" class="social-media-item social-media-image small" target="_blank"><div class="image-holder" style="background-image: url({{image}});" alt="{{caption}}" title="{{caption}}"></div></a>',
    after: function () {
        var firstInstaImage = $('.social-media-newsletter-section .social-media-items .social-media-image').first();
        var secondInstaImage = $('.social-media-newsletter-section .social-media-items .social-media-image').eq(1);
        var lastInstaImage = $('.social-media-newsletter-section .social-media-items .social-media-image').last();
        var facebookFollow = $('.social-media-newsletter-section .social-media-items .facebook-follow');
        var twitterFollow = $('.social-media-newsletter-section .social-media-items .twitter-follow');
        firstInstaImage.insertAfter(facebookFollow);
        secondInstaImage.insertAfter(firstInstaImage);
        lastInstaImage.insertAfter(twitterFollow);
    }
}

/* ---------------------------- $$$ --- NEWSLETTER SUBSCRIBING - OK --- $$$ ---------------------------- */
function newsletterSubscribing(subsEmailData, subsLoading, subsResult, subsResultText, subsAjaxUrl, successMessage, errorMessage, emailAddressErrorMessage, activeClassName, resultTimeout, gdprCheckbox, gdprCheckboxWarning) {
    var subsData = { subscribe: true, email: subsEmailData };
    subsLoading.addClass(activeClassName);
    if (gdprCheckbox.prop('checked')) {
        $.ajax({
            cache: false,
            type: "POST",
            url: subsAjaxUrl,
            data: subsData,
            success: function (data) {
                if (data.Success) {
                    subsResultText.html(successMessage);
                    subsLoading.removeClass(activeClassName);
                    subsResult.addClass(activeClassName);
                    setTimeout(function () {
                        subsResult.removeClass(activeClassName);
                    }, resultTimeout);
                } else {
                    subsEmailData != null && subsEmailData != '' ? subsResultText.html(errorMessage) : subsResultText.html(emailAddressErrorMessage);
                    subsLoading.removeClass(activeClassName);
                    subsResult.addClass(activeClassName);
                    setTimeout(function () {
                        subsResult.removeClass(activeClassName);
                    }, resultTimeout);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                subsResultText.html(errorMessage);
                subsLoading.removeClass(activeClassName);
                subsResult.addClass(activeClassName);
                setTimeout(function () {
                    subsResult.removeClass(activeClassName);
                }, resultTimeout);
            }
        });
    } else {
        subsLoading.removeClass(activeClassName);
        subsResultText.html(gdprCheckboxWarning);
        subsResult.addClass(activeClassName);
        setTimeout(function () {
            subsResult.removeClass(activeClassName);
        }, resultTimeout);
    }
}

/* ---------------------------- $$$ --- HOMEPAGE MAIN SLIDER - OK --- $$$ ---------------------------- */
var homepageMainSliderConfig = {
    infinite: true,
    autoplay: true,
    autoplaySpeed: parseInt($('.homepage-main-slider .homepage-slider .slide-items').attr('data-slides-time')) || 10000,
    slidesToShow: 1,
    slidesToScroll: 1,
    dots: false,
    fade: true,
    pauseOnFocus: false,
    pauseOnHover: false,
    pauseOnDotsHover: false,
    lazyLoad: 'ondemand',
    prevArrow: '.homepage-main-slider .homepage-slider .left-navigation',
    nextArrow: '.homepage-main-slider .homepage-slider .right-navigation',
}
/* ---------------------------- $$$ --- HOMEPAGE RELATED PRODUCTS - PRODUCTS IMAGES - OK --- $$$ ---------------------------- */
var homepageRelatedProductsImageSlideConfig = {
    infinite: true,
    autoplay: false,
    slidesToShow: 1,
    slidesToScroll: 1,
    swipe: false,
    touchMove: false,
    dots: true,
    lazyLoad: 'ondemand'
};
/* ---------------------------- $$$ --- HOMEPAGE RELATED CAMPAINGS - OK --- $$$ ---------------------------- */
var homepageRelatedCampaignsSlideConfig = {
    infinite: false,
    autoplay: false,
    autoplaySpeed: 3000,
    slidesToShow: 1,
    slidesToScroll: 1,
    lazyLoad: 'ondemand',
    nextArrow: '.homepage-related-campaigns .right-navigation',
    prevArrow: '.homepage-related-campaigns .left-navigation'
}

/* ---------------------------- $$$ --- HOMEPAGE RELATED PRODUCTS - OK --- $$$ ---------------------------- */
var homepageRelatedProductsSlideConfig = {
    infinite: false,
    autoplay: false,
    autoplaySpeed: 3000,
    slidesToShow: 3,
    dots: true,
    slidesToScroll: 1,
    lazyLoad: 'ondemand',
    responsive: [
        { breakpoint: 1200, settings: { slidesToShow: 2 } },
        { breakpoint: 992, settings: { slidesToShow: 2, infinite: true, centerMode: true, dots: false } },
        { breakpoint: 768, settings: { slidesToShow: 1, centerMode: true, centerPadding: '40px', dots: false } }
    ]
}

function homepageRelatedProductsCheckTabItemsForSliding() {
    var _tabHolder = $('.homepage-related-products .tab-actions-list');
    var _tabItems = _tabHolder.find('.tab-action-list-item');
    var _itemsWidthTotal = 0;
    var _holderWidth = _tabHolder.outerWidth();
    _tabItems.each(function () {
        _itemsWidthTotal += $(this).outerWidth(true);
    });
    if (_itemsWidthTotal > _holderWidth) {
        if (!_tabHolder.hasClass('slick-slider') && !_tabHolder.hasClass('slick-initialized')) {
            _tabHolder.slick({
                infinite: false,
                autoplay: false,
                variableWidth: true,
                dots: false,
                arrows: false
            });
        }
    } else {
        if (_tabHolder.hasClass('slick-slider') && _tabHolder.hasClass('slick-initialized')) {
            _tabHolder.slick('unslick');
        }
    }
}

/* ---------------------------- $$$ --- HOMEPAGE RELATED COLLECTIONS - OK --- $$$ ---------------------------- */
var homepageRelatedCollectionsSlideConfig = {
    infinite: true,
    autoplay: false,
    autoplaySpeed: 3000,
    slidesToShow: 1,
    slidesToScroll: 1,
    lazyLoad: 'ondemand',
    nextArrow: '.homepage-related-collections .right-navigation',
    prevArrow: '.homepage-related-collections .left-navigation'
};

/* ---------------------------- $$$ --- HOMEPAGE FEATURED COLLECTIONS - OK --- $$$ ---------------------------- */
var homepageFeaturedCollectionsSlideConfig = {
    infinite: true,
    autoplay: false,
    autoplaySpeed: 3000,
    slidesToShow: 1,
    slidesToScroll: 1,
    dots: true,
    lazyLoad: 'ondemand',
    nextArrow: '.homepage-featured-collections .right-navigation',
    prevArrow: '.homepage-featured-collections .left-navigation',
    appendDots: '.homepage-featured-collections .slide-dots'
};

/* ---------------------------- $$$ --- HOMEPAGE BLOG LIST - OK --- $$$ ---------------------------- */
var homepageBlogListSlideConfig = {
    infinite: true,
    autoplay: false,
    autoplaySpeed: 3000,
    slidesToShow: 3,
    slidesToScroll: 1,
    arrows: false,
    lazyLoad: 'ondemand',
    responsive: [
        { breakpoint: 992, settings: { slidesToShow: 2 } },
        { breakpoint: 600, settings: { slidesToShow: 1 } }
    ]
};

/* ---------------------------- $$$ --- CATEGORY PAGE SORTING SELECTOR --- $$$ ----------- DEĞİŞECEK ----------------- */
$('.common-selectors .sorting-list-trigger').click(function () {
    if ($(this).hasClass('active')) {
        $(this).removeClass('active');
    } else {
        $(this).addClass('active');
    }
    $(this).next('.sorting-list').slideToggle(50);
})


/* ---------------------------- $$$ --- EXTENSILE DETAILS - ACCORDION --- $$$ ---------------------------- */
$('.extender-action-button').click(function () {
    var _extensileArea = $('.extensile-area');
    var _opener = $('.extender-action-button.opener');
    var _closer = $('.extender-action-button.closer');
    var _contentHeight = _extensileArea.find('.common-content-holder').outerHeight(true);
    if (_extensileArea.hasClass('opened')) {
        _closer.hide();
        _opener.show();
        _extensileArea.css('height', '');
        _extensileArea.removeClass('opened');
    } else {
        _opener.hide();
        _closer.show();
        _extensileArea.height(_contentHeight);
        _extensileArea.addClass('opened');
    }
})


/* ---------------------------- $$$ --- CATEGORY PAGE FEATURED PRODUCTS - OK --- $$$ ---------------------------- */
var commonFeaturedProductsSlideConfig = {
    infinite: true,
    autoplay: false,
    autoplaySpeed: 3000,
    slidesToShow: 1,
    slidesToScroll: 1,
    dots: false,
    lazyLoad: 'ondemand',
    nextArrow: '.common-featured-product-listing .right-navigation',
    prevArrow: '.common-featured-product-listing .left-navigation'
}


/* ---------------------------- $$$ --- COMMON PRODUCT LISTING - PRODUCTS IMAGES - OK --- $$$ ---------------------------- */
var commonProductListingProductImageSlideConfig = {
    infinite: true,
    autoplay: false,
    slidesToShow: 1,
    slidesToScroll: 1,
    dots: true,
    lazyLoad: 'ondemand'
};


/* ---------------------------- $$$ --- PRODUCT PAGE MAIN SLIDER IMAGES - OK --- $$$ ---------------------------- */
var productPageMainSliderImagesSlideConfig = {
    infinite: true,
    autoplay: false,
    slidesToShow: 1,
    slidesToScroll: 1,
    dots: false,
    fade: true,
    pauseOnFocus: false,
    pauseOnHover: false,
    pauseOnDotsHover: false,
    lazyLoad: 'ondemand',
    prevArrow: '.product-main-slider .product-hero-slider .left-navigation',
    nextArrow: '.product-main-slider .product-hero-slider .right-navigation',
}

/* ---------------------------- $$$ --- PRODUCT PAGE OVERVIEW IMAGES - OK --- $$$ ---------------------------- */
var productPageOverviewImagesSlideConfig = {
    infinite: true,
    autoplay: true,
    autoplaySpeed: 10000,
    slidesToShow: 1,
    slidesToScroll: 1,
    dots: false,
    fade: true,
    lazyLoad: 'ondemand',
    nextArrow: '.product-overview .product-images .right-navigation',
    prevArrow: '.product-overview .product-images .left-navigation'
}

/* ---------------------------- $$$ --- PRODUCT PAGE PRICE CALCULATION --- $$$ ---------------------------- */
function calculateProductPrice(isChangeQuantity = false) {
    // Overview Area Elements
    var overview_OldPrice = $('.product-overview .product-overview-holder .old-price');
    var overview_ActualPrice = $('.product-overview .product-overview-holder .actual-price');
    var overview_DiscountPrice = $('.product-overview .product-overview-holder .discount-price');
    // Fixed Bar Elements
    var fixed_OldPrice = $('.product-fixed-overview-details .old-price');
    var fixed_ActualPrice = $('.product-fixed-overview-details .actual-price');
    var fixed_DiscountPrice = $('.product-fixed-overview-details .discount-price');
    // Bundle Item List Total Area Elements
    var bundleItemListTotalOldPrice = $('.tab-bundle-prices .table-totals .bundle-item-old-price');
    var bundleItemListTotalActualPrice = $('.tab-bundle-prices .table-totals .bundle-item-actual-price');
    var bundleItemListTotalDiscountPrice = $('.tab-bundle-prices .table-totals .bundle-item-discount-price');
    var bundleItemListTotalQuantity = $('.tab-bundle-prices .table-totals .bundle-item-quantity .quantity');
    // Common Hidden Products --> Element List
    var commonHiddenProductDatas = $('[name=associated-products-common-single-data]');
    // Common Hidden Products Total Data Element
    var commonHiddenTotalDatas = $('[name=associated-products-common-total-data]');
    // Currency String Data
    var currencyString = $('html').attr('data-currency');

    // Stylize Price Function
    function stylizePrice(priceNumber, currencyString) {
        var stringPrice = priceNumber.toString();
        var priceFirstPart = stringPrice.toString().substr(0, stringPrice.length - 3);
        var priceLastPart = stringPrice.substr(stringPrice.length - 3, stringPrice.length);
        if (priceFirstPart.length > 0) {
            return (priceFirstPart + '.' + priceLastPart + ' ' + currencyString);
        } else {
            return (priceLastPart + ' ' + currencyString);
        }
    }

    // Get Price And Quantity Datas From Common Hidden Total Element
    var calculatedOldPrice = commonHiddenTotalDatas.attr('data-total-old-price');
    var calculatedActualPrice = commonHiddenTotalDatas.attr('data-total-actual-price');
    var calculatedDiscountPrice = commonHiddenTotalDatas.attr('data-total-discount-price');
    var totalItemsQuantity = commonHiddenTotalDatas.attr('data-total-quantity');
    // Change Values To New Values When If Has Any Update Process
    if (isChangeQuantity) {
        // Reset Values
        calculatedOldPrice = 0;
        calculatedActualPrice = 0;
        calculatedDiscountPrice = 0;
        totalItemsQuantity = 0;
        commonHiddenProductDatas.each(function () {
            // Set This Row Datas
            var thisDataRow = $(this);
            var thisOldPrice = thisDataRow.attr('data-product-old-price');
            var thisActualPrice = thisDataRow.attr('data-product-actual-price');
            var thisDiscountPrice = thisDataRow.attr('data-product-discount-price');
            var thisQuantity = thisDataRow.attr('data-product-quantity');
            // Calculate Datas Every Row And Update Variables
            calculatedOldPrice += thisOldPrice * thisQuantity;
            calculatedActualPrice += thisActualPrice * thisQuantity;
            calculatedDiscountPrice += thisDiscountPrice * thisQuantity;
            totalItemsQuantity += parseInt(thisQuantity);
        });
        commonHiddenTotalDatas.attr('data-total-old-price', calculatedOldPrice);
        commonHiddenTotalDatas.attr('data-total-actual-price', calculatedActualPrice);
        commonHiddenTotalDatas.attr('data-total-discount-price', calculatedDiscountPrice);
        commonHiddenTotalDatas.attr('data-total-quantity', totalItemsQuantity);
    }
    // Stylized Price Datas From Common Hidden Total Element
    var stylized_calculatedOldPrice = stylizePrice(calculatedOldPrice, currencyString);
    var stylized_calculatedActualPrice = stylizePrice(calculatedActualPrice, currencyString);
    var stylized_calculatedDiscountPrice = stylizePrice(calculatedDiscountPrice, currencyString);

    // Update Overview Datas
    function updateOverviewDatas() {
        // Place Stylized Total Prices To Fixed Bar Elements
        overview_OldPrice.html(stylized_calculatedOldPrice);
        overview_ActualPrice.html(stylized_calculatedActualPrice);
        overview_DiscountPrice.html(stylized_calculatedDiscountPrice);
    }

    // Update Function Fixed Bar Datas
    function updateFixedBarDatas() {
        // Place Stylized Total Prices To Fixed Bar Elements
        fixed_OldPrice.html(stylized_calculatedOldPrice);
        fixed_ActualPrice.html(stylized_calculatedActualPrice);
        fixed_DiscountPrice.html(stylized_calculatedDiscountPrice);
    }

    // Update Bundle Items List Total Datas
    function updateBundleItemListTotalDatas() {
        // Place Stylized Total Prices To Bundle Items Elements
        bundleItemListTotalOldPrice.html(stylized_calculatedOldPrice);
        bundleItemListTotalActualPrice.html(stylized_calculatedActualPrice);
        bundleItemListTotalDiscountPrice.html(stylized_calculatedDiscountPrice);
        bundleItemListTotalQuantity.html(totalItemsQuantity);
    }

    // Update Dimensions Item Quantity
    function updateDimensionsItemQuantityData() {
        commonHiddenProductDatas.each(function () {
            var thisDataRow = $(this);
            var thisProductID = thisDataRow.attr('data-product-id');
            var thisQuantity = thisDataRow.attr('data-product-quantity');
            var thisDimensionsListItem = $('.tab-dimension-items .tab-item-list-area .tab-item[data-product-id=' + thisProductID + ']');
            thisDimensionsListItem.find('.product-quantity-holder .quantity').val(thisQuantity);
        });
    }

    // Update Bundle Item Quantity
    function updateBundleItemQuantityData() {
        commonHiddenProductDatas.each(function () {
            var thisDataRow = $(this);
            var thisProductID = thisDataRow.attr('data-product-id');
            var thisQuantity = thisDataRow.attr('data-product-quantity');
            var thisBundleListItem = $('.tab-bundle-prices .bundle-list-items .bundle-item[data-product-id=' + thisProductID + ']');
            thisBundleListItem.find('.bundle-item-quantity .quantity').val(thisQuantity);
        });
    }

    // Doing Stuff Update Datas At Views
    updateOverviewDatas();
    updateFixedBarDatas();
    updateBundleItemListTotalDatas();
    if (isChangeQuantity) {
        updateDimensionsItemQuantityData();
        updateBundleItemQuantityData();
    }
}

/* ---------------------------- $$$ --- PRODUCT PAGE PRODUCT QUANTITY CHANGING BY USING PLUS OR MINUS BUTTONS --- $$$ ---------------------------- */
// Associated Plus and Minus
$(document).on('click', '.tab-dimension-items .tab-item-list-area .product-quantity-holder .minus, .tab-dimension-items .tab-item-list-area .product-quantity-holder .plus', function () {
    var itemQuantityInput = $(this).parents('.product-quantity-holder').find('.quantity');
    var currentVal = parseInt(itemQuantityInput.val());
    var isAdd = $(this).hasClass('plus');
    var thisProductID = $(this).parents('.tab-item').attr('data-product-id');
    isNaN(currentVal) ? itemQuantityInput.val('1') : itemQuantityInput.val(isAdd ? ++currentVal : (currentVal > 0 ? --currentVal : currentVal));
    var thisProductDatasAtCommonHiddens = $('[name=associated-products-common-single-data][data-product-id=' + thisProductID + ']');
    thisProductDatasAtCommonHiddens.attr('data-product-quantity', currentVal);
    $("#product_enteredQuantity_" + thisProductID).val(currentVal);
    calculateProductPrice(true);
});
// Additional Plus and Minus
$('.tab-dimension-items .additional-items .product-quantity-holder .minus, .tab-dimension-items .additional-items .product-quantity-holder .plus').on('click', function () {
    var itemQuantityInput = $(this).parents('.product-quantity-holder').find('.quantity');
    var currentVal = parseInt(itemQuantityInput.val());
    var isAdd = $(this).hasClass('plus');
    var thisProductID = $(this).parents('.additional-item').attr('data-product-id');
    isNaN(currentVal) ? itemQuantityInput.val('1') : itemQuantityInput.val(isAdd ? ++currentVal : (currentVal > 0 ? --currentVal : currentVal));
    var thisProductDatasAtCommonHiddens = $('[name=additional-products-common-single-data][data-product-id=' + thisProductID + ']');
    thisProductDatasAtCommonHiddens.attr('data-product-quantity', currentVal);
    $("#product_enteredQuantity_" + thisProductID).val(currentVal);
    calculateProductPrice(true);
});
// List Tab Plus and Minus
$('.tab-bundle-prices .bundle-item-quantity .minus, .tab-bundle-prices .bundle-item-quantity .plus').on('click', function () {
    var itemQuantityInput = $(this).parents('.bundle-item-quantity').find('.quantity');
    var currentVal = parseInt(itemQuantityInput.val());
    var isAdd = $(this).hasClass('plus');
    var thisProductID = $(this).parents('.bundle-item').attr('data-product-id');
    isNaN(currentVal) ? itemQuantityInput.val('1') : itemQuantityInput.val(isAdd ? ++currentVal : (currentVal > 0 ? --currentVal : currentVal));
    var thisProductDatasAtCommonHiddens = $('[name=associated-products-common-single-data][data-product-id=' + thisProductID + ']');
    thisProductDatasAtCommonHiddens.attr('data-product-quantity', currentVal);
    $("#product_enteredQuantity_" + thisProductID).val(currentVal);
    calculateProductPrice(true);
});
/* ---------------------------- $$$ --- PRODUCT PAGE FIXED OVERVIEW DETAILS --- $$$ ---------------------------- */
function productFixedOverviewDetailsStatus() {
    var offsetTop = $('.product-overview').offset().top - $('header.main-header').height();
    var fixedElement = $('.product-fixed-overview-details');
    $(window).scrollTop() > offsetTop ? fixedElement.removeClass('hidden') : fixedElement.addClass('hidden');
}

if ($('body').hasClass('productPage')) {
    $(window).scroll(function () {
        productFixedOverviewDetailsStatus();
    });
    $(document).ready(function () {
        productFixedOverviewDetailsStatus();
    });
}

/* ---------------------------- $$$ --- PRODUCT PAGE PRODUCT DIMENSIONS TAB ||| ADDITIONAL ITEMS ADD AND REMOVE OPERATIONS --- $$$ ---------------------------- */
$('.tab-dimension-items .additional-items-trigger').click(function () {
    $('.additional-item-list').slideToggle(50);
    $('.additional-items-trigger').hasClass('active') ? $('.additional-items-trigger').removeClass('active') : $('.additional-items-trigger').addClass('active');
});

function checkAdditionalItemsTabShown() {
    var additionalItemsCount = $('.additional-items .additional-item-list .additional-item').length;
    additionalItemsCount == 0 ? $('.additional-items').hide() : $('.additional-items').show();
}

$('.tab-dimension-items .additional-item-list .additional-item .product-add-to-collection-button').click(function () {
    var thisRoot = $(this).parents('.additional-item');
    var additionalQuantity = thisRoot.find('.product-quantity-and-add-row .quantity').val();
    var thisProductID = $(this).parents('.additional-item').attr('data-product-id');
    var thisProductBundleAdditionalListMigration = $('.tab-bundle-prices .bundle-additional-items .bundle-item[data-product-id=' + thisProductID + ']');
    thisRoot.find('.product-quantity-row .quantity').val(additionalQuantity);
    thisRoot.addClass('tab-item');
    $('.tab-dimension-items .tab-item-list-area').append(thisRoot);
    thisProductBundleAdditionalListMigration.find('.quantity-cell .bundle-item-quantity .quantity').html(additionalQuantity);
    $('.tab-bundle-prices .bundle-list-items').append(thisProductBundleAdditionalListMigration);
    var thisProductDatasAtCommonHiddens = $('[name=additional-products-common-single-data][data-product-id=' + thisProductID + ']');
    thisProductDatasAtCommonHiddens.attr('name', 'associated-products-common-single-data');
    calculateProductPrice(true);
    checkAdditionalItemsTabShown();
});
$('.tab-dimension-items .additional-item .remove-product').click(function () {
    var thisRoot = $(this).parents('.additional-item');
    var additionalQuantity = thisRoot.find('.product-quantity-holder .quantity').val();
    var thisProductID = $(this).parents('.additional-item').attr('data-product-id');
    var thisProductBundleListMigration = $('.tab-bundle-prices .bundle-list-items .bundle-item[data-product-id=' + thisProductID + ']');
    thisRoot.find('.product-quantity-and-add-row .quantity').val(additionalQuantity);
    thisRoot.removeClass('tab-item');
    $('.tab-dimension-items .additional-item-list').append(thisRoot);
    $('.tab-bundle-prices .bundle-additional-items').append(thisProductBundleListMigration);
    var thisProductDatasAtCommonHiddens = $('[name=associated-products-common-single-data][data-area-by=additional][data-product-id=' + thisProductID + ']');
    thisProductDatasAtCommonHiddens.attr('name', 'additional-products-common-single-data');
    calculateProductPrice(true);
    checkAdditionalItemsTabShown();
});

/* ---------------------------- $$$ --- PRODUCT PAGE PRODUCT DIMENSIONS TAB DIMENSION ITEMS SLIDE OPERATIONS --- $$$ ---------------------------- */
var productDimensionItemImageSlideConfig = {
    infinite: true,
    autoplay: false,
    autoplaySpeed: 3000,
    slidesToShow: 1,
    slidesToScroll: 1,
    dots: true,
    lazyLoad: 'ondemand'
};

/* ---------------------------- $$$ --- STORE LIST CITY AND STORES ACCORDION --- $$$ ---------------------------- */
$('.store-city-and-stores .city-and-stores-list .city-and-stores-list-item .item-title').click(function () {
    if ($(this).parents('.city-and-stores-list-item').hasClass('active')) {
        $(this).parents('.city-and-stores-list-item').removeClass('active');
    } else {
        $(this).parents('.city-and-stores-list-item').addClass('active');
    }
    $(this).parents('.city-and-stores-list-item').find('.item-body').slideToggle();
    if ($(this).parents('.city-and-stores-list-item').has('.store-list-item')) {
        $(this).parents('.city-and-stores-list-item').find('.store-list-item').each(function (index) {
            var latCoordinate = $(this).attr('data-store-lat-coordinate');
            var lngCoordinate = $(this).attr('data-store-lng-coordinate');
            var zoomLevel = parseInt($(this).attr('data-store-zoom-level'));
            var mapHolder = $(this).find('.map-holder');
            var mapSizes = $(this).parents('.city-and-stores-list').attr('data-map-sizes');
            var languageCulture = $(this).parents('.city-and-stores-list').attr('data-map-language-and-culture');
            var mapImageURL = generateYandexMapImageURL(languageCulture, latCoordinate, lngCoordinate, zoomLevel, mapSizes);
            mapHolder.css('background-image', 'url("' + mapImageURL + '")');
        })
    }
});

/* ---------------------------- $$$ --- STORE LIST CITY AND STORES SHOWING AND HIDING BY TYPE --- $$$ ---------------------------- */
$('.store-selectors .selector-list .selector-location-filter').each(function () {
    $(this).click(function () {
        var selectedStoreFilterData = $(this).attr('data-store-list-type');
        var thisLocationFilter = $(this).find('.location-filter');
        var otherLocationFilters = $('.store-selectors .selector-list .selector-location-filter').not(this).find('.location-filter');
        otherLocationFilters.removeClass('active');
        thisLocationFilter.addClass('active');
        if (selectedStoreFilterData == "all") {
            storeAllLettersShow();
            storeAllStoresShow();
            $('.store-city-and-stores .city-and-stores-list .city-and-stores-list-item').attr('data-list-by-letter', 'false');
            $('.store-letter-list .letter-list .letter-list-item').not(this).removeClass('selected');
        }
        if (selectedStoreFilterData == "domestic") {
            storeDomesticLettersShow();
            storeDomesticStoresShow();
            $('.store-city-and-stores .city-and-stores-list .city-and-stores-list-item').attr('data-list-by-letter', 'false');
            $('.store-letter-list .letter-list .letter-list-item').not(this).removeClass('selected');
        }
        if (selectedStoreFilterData == "abroad") {
            storeAbroadLettersShow();
            storeAbroadStoresShow();
            $('.store-city-and-stores .city-and-stores-list .city-and-stores-list-item').attr('data-list-by-letter', 'false');
            $('.store-letter-list .letter-list .letter-list-item').not(this).removeClass('selected');
        }
        if (selectedStoreFilterData == "outlet") {
            storeOutletLettersShow();
            storeOutletStoresShow();
            $('.store-city-and-stores .city-and-stores-list .city-and-stores-list-item').attr('data-list-by-letter', 'false');
            $('.store-letter-list .letter-list .letter-list-item').not(this).removeClass('selected');
        }
    });
});

/* ---------------------------- $$$ --- STORE LIST SEARCH STORE --- $$$ ---------------------------- */
if ($('body').hasClass('storeListPage')) {
    var storePage_SelectorList = $('.selector-list');
    var storePage_LocationSearch_Trigger = $('.store-selectors .selector-location-search .location-filter');
    var storePage_LocationSearch_SearchBarHolder = $('.store-selectors .selector-location-search .location-search-bar-holder');
    var storePage_LocationSearch_SearchBar_SearchInput = storePage_LocationSearch_SearchBarHolder.find('.location-search-input');
    var storePage_LocationSearch_SearchBar_TypeSelector = storePage_LocationSearch_SearchBarHolder.find('.location-search-type-select');
    var storePage_LocationSearch_SearchBar_TypeSelector_Trigger = storePage_LocationSearch_SearchBar_TypeSelector.find('.location-type-list-trigger');
    var storePage_LocationSearch_SearchWrapper = $('.location-search-result-wrapper');
    var storePage_LocationSearch_ResultList = storePage_LocationSearch_SearchWrapper.find('.location-search-result-stores-list');
    var storePage_LocationSearch_ResultTitleCount = storePage_LocationSearch_SearchWrapper.find('.store-search-result-quantity');
    var storePage_Stores_AllStores = $('.store-city-and-stores .city-and-stores-list');
    var storePage_Stores_AllStores_Item = storePage_Stores_AllStores.find('.store-list-item');

    // clear search data function
    function clearSearchDataAndResult() {
        storePage_LocationSearch_SearchBar_SearchInput.val('');
        storePage_LocationSearch_ResultList.html('');
        storePage_LocationSearch_ResultList.hide();
        storePage_LocationSearch_ResultTitleCount.html('0');
    }

    // search trigger button
    storePage_LocationSearch_Trigger.click(function () {
        var _this = $(this);
        if (_this.hasClass('active')) {
            _this.removeClass('active');
            storePage_LocationSearch_SearchWrapper.hide();
        } else {
            _this.addClass('active');
        }

        // clear search result
        clearSearchDataAndResult();

        // type selector trigger close
        if (storePage_LocationSearch_SearchBar_TypeSelector_Trigger.hasClass('active')) {
            storePage_LocationSearch_SearchBar_TypeSelector_Trigger.removeClass('active');
            storePage_LocationSearch_SearchBar_TypeSelector_Trigger.next('.store-type-list').slideToggle(50);
        }

        // type selector trigger and selected type reset
        storePage_LocationSearch_SearchBar_TypeSelector_Trigger.attr('data-search-type', storePage_LocationSearch_SearchBar_TypeSelector_Trigger.next('.store-type-list').find('.store-type-list-item[data-default-type=true]').attr('data-search-type'));
        storePage_LocationSearch_SearchBar_TypeSelector_Trigger.find('.selected-location-type').html(storePage_LocationSearch_SearchBar_TypeSelector_Trigger.next('.store-type-list').find('.store-type-list-item[data-default-type=true]').find('.list-action').html());

        // selector list overflow setting
        if (!storePage_SelectorList.hasClass('overflow-hidden')) {
            storePage_SelectorList.addClass('overflow-hidden');
        }

        // close search bar and selector list overflow setting
        storePage_LocationSearch_SearchBarHolder.toggle("slide", { direction: 'right' }, 500, function () {
            if (storePage_SelectorList.hasClass('overflow-hidden')) {
                storePage_SelectorList.removeClass('overflow-hidden');
            }
        });
    });

    // type selector list opener
    storePage_LocationSearch_SearchBar_TypeSelector_Trigger.click(function () {
        if ($(this).hasClass('active')) {
            $(this).removeClass('active');
        } else {
            $(this).addClass('active');
        }
        $(this).next('.store-type-list').slideToggle(50);
    });

    // type selector select a type
    storePage_LocationSearch_SearchBar_TypeSelector.find('.store-type-list .store-type-list-item').click(function () {
        clearSearchDataAndResult();
        var _this = $(this);
        storePage_LocationSearch_SearchBar_TypeSelector_Trigger.attr('data-search-type', _this.attr('data-search-type'));
        storePage_LocationSearch_SearchBar_TypeSelector_Trigger.find('.selected-location-type').html(_this.find('.list-action').html());
        storePage_LocationSearch_SearchBar_TypeSelector_Trigger.removeClass('active');
        storePage_LocationSearch_SearchBar_TypeSelector_Trigger.next('.store-type-list').slideToggle(50);
    });

    // search clear button
    storePage_LocationSearch_SearchBarHolder.find('.location-search-clear-button').click(function () {
        clearSearchDataAndResult();
    });

    // input keyup
    storePage_LocationSearch_SearchBar_SearchInput.on('keyup', function () {
        // get current value
        var _value = $(this).val().toLocaleLowerCase('tr-TR');

        // get selected search type
        var _searchType = storePage_LocationSearch_SearchBar_TypeSelector_Trigger.attr('data-search-type');

        // clear result list every keyup
        storePage_LocationSearch_ResultList.html('');

        // check result wrapper is showing
        if (storePage_LocationSearch_SearchWrapper.is(':hidden')) {
            storePage_LocationSearch_SearchWrapper.show();
        }

        // if search value is not null search item and add to result list
        if (_value.length > 0) {
            storePage_Stores_AllStores_Item.each(function () {
                var _this = $(this);
                var _thisType = _this.attr('data-store-type');
                var _thisTitle = _this.find('.store-title').text().toLocaleLowerCase('tr-TR');
                var _thisAddress = _this.find('.address-holder .address').text().toLocaleLowerCase('tr-TR');
                var _thisPhone = _this.find('.phone-holder .phone').text().toLocaleLowerCase('tr-TR');
                if ((_thisTitle.indexOf(_value) !== -1 || _thisAddress.indexOf(_value) !== -1 || _thisPhone.indexOf(_value) !== -1) && (_searchType != "all" ? _thisType == _searchType : true)) {
                    _this.clone().appendTo(storePage_LocationSearch_ResultList);
                }
                ;
            });
        }

        // get result count from result list item count
        var resultCount = storePage_LocationSearch_ResultList.find('.store-list-item').length;

        // set result count on view
        storePage_LocationSearch_ResultTitleCount.html(resultCount);

        // if no result hide result list otherwise show
        if (resultCount > 0) {
            storePage_LocationSearch_ResultList.show();
        } else {
            storePage_LocationSearch_ResultList.hide();
        }
    });
}

/* ---------------------------- $$$ --- STORE LIST CITY AND STORES SHOWING AND HIDING BY LETTER --- $$$ ---------------------------- */
$('.store-letter-list .letter-list .letter-list-item').each(function () {
    $(this).click(function () {
        var thisLetterData = $(this).attr('data-letter');
        var storeListElement = $('.store-city-and-stores .city-and-stores-list .city-and-stores-list-item');
        $('.store-letter-list .letter-list .letter-list-item').not(this).removeClass('selected');
        $(this).addClass('selected');
        storeListElement.each(function () {
            var storeListElementFirstLetter = $(this).attr('data-first-letter');
            if ($(this).attr('data-list-by-letter') == "true") {
                $(this).show();
            }
            if ($(this).is(':visible')) {
                $(this).attr('data-list-by-letter', 'true');
                if (storeListElementFirstLetter != thisLetterData) {
                    $(this).hide();
                } else {
                    $(this).show();
                }
            }
        });
    });
});

/* ---------------------------- $$$ --- STORE LIST CITY AND STORES SHOW ALL STORES BY FILTERING WITH LETTER --- $$$ ---------------------------- */
$('.store-letter-list .show-all-letters-stores-trigger').click(function () {
    $('.store-city-and-stores .city-and-stores-list .city-and-stores-list-item').each(function () {
        $('.store-letter-list .letter-list .letter-list-item').removeClass('selected');
        if ($(this).attr('data-list-by-letter') == "true") {
            $(this).show();
        }
    });
});

/* ---------------------------- $$$ --- HOMEPAGE SLIDER REDIRECTIONS AREA --- $$$ ---------------------------- */
var headerMains = $('header.main-header .header-mains');
var homepageSliderRedirectionArea = $('.homepage-slider .redirection-area');
var homepageSliderRedirection_ActionsWrapper = homepageSliderRedirectionArea.find('.redirection-actions');
var homepageSliderRedirection_DynamicActionsWrapper = homepageSliderRedirection_ActionsWrapper.find('.redirection-dynamic-actions');
var homepageSliderRedirection_DynamicActionsItem = homepageSliderRedirection_DynamicActionsWrapper.find('.dynamic-action-box');
var homepageSliderRedirection_DynamicActionsItem_Count = homepageSliderRedirection_DynamicActionsItem.length;
var homepageSliderRedirection_StaticActionsWrapper = homepageSliderRedirection_ActionsWrapper.find('.redirection-static-actions');
var homepageSliderRedirection_DynamicActionsWrapper_floatingCarouselConfig = {
    scrollerAlignment: 'vertical',
    looped: false,
    scrollSpeed: 'slow'
}
if (homepageSliderRedirection_DynamicActionsWrapper.length > 0) {
    var homepageSliderRedirection_DynamicActionsWrapper_floatingCarousel = new floatingCarousel('.redirection-dynamic-actions', homepageSliderRedirection_DynamicActionsWrapper_floatingCarouselConfig);
}

function set_HomepagesliderRedirectionArea_PositionOfHomepageSliderRedirectionArea() {
    homepageSliderRedirectionArea.css('top', headerMains.offset().top + headerMains.height());
}

function set_HomepagesliderRedirectionArea_HeightByDynamicItems() {
    var wrapperHeight = homepageSliderRedirection_DynamicActionsWrapper.height();
    var itemHeight = homepageSliderRedirection_DynamicActionsItem.outerHeight(true);
    var itemCount = homepageSliderRedirection_DynamicActionsItem_Count;
    var totalHeightByItems = itemHeight * itemCount;
    var currentVisibleDynamicWrapperHeight = homepageSliderRedirection_ActionsWrapper.height() - homepageSliderRedirection_StaticActionsWrapper.height();
    homepageSliderRedirection_DynamicActionsWrapper.css('height', 1120);
}

function update_HomepagesliderRedirectionArea_FloatingCarouselStatus() {
    if (homepageSliderRedirectionArea.is(':visible')) {
        homepageSliderRedirection_DynamicActionsWrapper_floatingCarousel.update(homepageSliderRedirection_DynamicActionsWrapper_floatingCarouselConfig);
    } else {
        if (homepageSliderRedirection_DynamicActionsWrapper.hasClass('floatingCarouselContainer')) {
            homepageSliderRedirection_DynamicActionsWrapper_floatingCarousel.destroy();
        }
    }
}

function set_HomepagesliderRedirectionArea_CommonStatus() {
    set_HomepagesliderRedirectionArea_PositionOfHomepageSliderRedirectionArea();
    set_HomepagesliderRedirectionArea_HeightByDynamicItems();
    update_HomepagesliderRedirectionArea_FloatingCarouselStatus();
}


/* ---------------------------- $$$ --- MULTI LANGUAGE DROPDOWN --- $$$ ---------------------------- */


//$('.sorting-list-trigger-header').click(function () {
//    if ($(this).hasClass('active')) {
//        $(this).removeClass('active');
//    } else {
//        $(this).addClass('active');
//    }
//    $(this).next('.sorting-list').slideToggle(50);
//})

/* ---------------------------- $$$ --- HOMEPAGE MAIN SLIDER COUNTDOWN --- $$$ ---------------------------- */

const deadline = 'March 31 2021 23:59:59';

function getTimeRemaining(endtime) {
    var now = new Date().getTime();
    var distance = Date.parse(endtime) - now;

    const total = distance;
    const seconds = Math.floor((total / 1000) % 60);
    const minutes = Math.floor((total / 1000 / 60) % 60);
    const hours = Math.floor((total / (1000 * 60 * 60)) % 24);
    const days = Math.floor(total / (1000 * 60 * 60 * 24));

    return {
        total,
        days,
        hours,
        minutes,
        seconds
    };
}
function initializeClock(id, endtime) {
    const clock = document.getElementById(id);
    const daysSpan = clock.querySelector('.days');
    const hoursSpan = clock.querySelector('.hours');
    const minutesSpan = clock.querySelector('.minutes');
    const secondsSpan = clock.querySelector('.seconds');

    function updateClock() {
        const t = getTimeRemaining(endtime);

        daysSpan.innerHTML = t.days;
        hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
        minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
        secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);

        if (t.total <= 0) {
            document.getElementById(id).style.display = "none";
        }
    }

    updateClock();
    var timeinterval = setInterval(updateClock, 1000);
}

// initializeClock('clockdiv', deadline);
